(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.React = {}));
})(this, (function (exports) { 'use strict';

	//检查 Symbol 是否是一个函数 (在支持 ES6 的环境中是一个函数)
	//Symbol.for 是一个静态方法，用于创建或访问一个全局注册的 symbol
	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	// 表示普通的 React 元素，即通过 JSX 创建的组件或 DOM 元素
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	/* eslint-disable @typescript-eslint/no-explicit-any */
	//生产环境
	//执行 jsx 方法和 React.createElement 方法的返回结果是 ReactElement 的数据结构
	//实现 ReactElement 数据结构
	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'lihecen'
	    };
	    return element;
	};
	//实现 jsx 方法
	//import { jsx as _jsx } from 'react/jsx-runtime';
	//function App() {
	//	return _jsx('div', { children: 'Hello world!' });
	//}
	// jsx 方法接收两个参数，第一个为类型，第二个参数 config 为其他配置，可能有第三个参数 children
	const jsx = (type, config, ...children) => {
	    let key = null;
	    let ref = null;
	    const props = {};
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = '' + val;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    //处理 children
	    const childrenLength = children.length;
	    if (childrenLength) {
	        if (childrenLength === 1) {
	            // [child]
	            props.children = children[0];
	        }
	        else {
	            //[child, child, child]
	            props.children = children;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};

	//当前使用的 hooks 指针，用来指向正在使用 hooks 的实现版本 (mount, update.........)
	const currentDispatcher = {
	    current: null
	};
	//查询当前使用的 hooks 集合
	//eg: 调用 useState 的背后过程
	//function useState(initial) {
	//  const dispatcher = resolveDispatcher();  //获取当前 useState 的具体实现
	//  return dispatcher.useState(initial);  //调用 mount 或者 update 的 useState
	//}
	//进一步举例
	//eg: 在 mount 时
	//currentDispatcher.current = HooksDispatcherOnMount;
	//const HooksDispatcherOnMount = {
	//   useState: mountState;
	//}
	const resolveDispatcher = () => {
	    const dispatcher = currentDispatcher.current;
	    if (dispatcher === null) {
	        //当前代码执行上下文不是在函数组件或者自定义 hooks 中
	        throw new Error('hooks 只能在函数组件中执行');
	    }
	    return dispatcher;
	};

	//react包的入口
	const useState = (initialState) => {
	    const dispatcher = resolveDispatcher();
	    return dispatcher.useState(initialState);
	};
	//内部数据共享层
	const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
	    currentDispatcher
	};
	var index = {
	    version: '1.0.0',
	    createElement: jsx
	};

	exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
	exports.default = index;
	exports.useState = useState;

	Object.defineProperty(exports, '__esModule', { value: true });

}));
